// Licensed to ClickHouse, Inc. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. ClickHouse, Inc. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// +build amd64 arm64

// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/column_safe.tpl

package column

import (
	"unsafe"
	"reflect"
	"github.com/zhangfane/clickhouse-go/v2/lib/binary"
)


{{- range . }}

func (col *{{ .ChType }}) Decode(decoder *binary.Decoder, rows int) error {
	if rows == 0 {
		return nil
	}
	const size = {{ .Size }} / 8

	col.data = append(col.data, make([]{{ .GoType }}, rows)...)

	var dst []byte
	slice := (*reflect.SliceHeader)(unsafe.Pointer(&dst))
	slice.Data = (*reflect.SliceHeader)(unsafe.Pointer(col)).Data
	slice.Len = len(col.data) * size
	slice.Cap = cap(col.data) * size

	if err := decoder.Raw(dst); err != nil {
		return err
	}
	return nil
}

func (col *{{ .ChType }}) Encode(encoder *binary.Encoder) error {
	if len(col.data) == 0 {
		return nil
	}
	const size = {{ .Size }} / 8
	scratch := make([]byte, size*len(col.data))
	{
	    var src []byte
	    slice := (*reflect.SliceHeader)(unsafe.Pointer(&src))
	    slice.Data = (*reflect.SliceHeader)(unsafe.Pointer(col)).Data
	    slice.Len = len(col.data) * size
        slice.Cap = cap(col.data) * size

		copy(scratch, src)
	}
	return encoder.Raw(scratch)
}

{{- end }}
